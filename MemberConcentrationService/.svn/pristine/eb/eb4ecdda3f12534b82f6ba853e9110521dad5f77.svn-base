package com.cmts.xm.web.member;
/** 
 *___ ___ ___ ___ ___ ___ ___ ___ ___ ___ ___
 *公司：哈尔滨富力通(研发二部)             			 
 *                                        	 
 *项目： MemberConcentrationService	              	 	   
 *作者：周贵雨     			              		 
 *时间：2018年5月19日 上午9:26:59                 		 
 *功能：                                                                                                  	 	 
 *___ ___ ___ ___ ___ ___ ___ ___ ___ ___ ___
 */
import java.net.URLDecoder;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import net.sf.json.JSONObject;

import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import com.cmts.xm.bean.table.common.JsonBean;
import com.cmts.xm.bean.table.member.C0001_MEM_ACCOUNT;
import com.cmts.xm.bean.table.member.C0002_MEM_DAYBOOK;
import com.cmts.xm.bean.vo.ResultVo;
import com.cmts.xm.dao.annotation.NoCheckPermission;
import com.cmts.xm.dao.util.DateUtil;
import com.cmts.xm.service.common.CommonService;
import com.cmts.xm.service.member.MemcardService;
import com.cmts.xm.utils.HttpUtils;

	@SuppressWarnings({ "all" })
	@Controller
	@RequestMapping(value = "/")
	public class MemCardController {
		
		private static Logger log = Logger.getLogger(MemCardController.class);		
		@Autowired
		private MemcardService  memcardService;
		@Autowired
		private CommonService  commonService;
		
		@RequestMapping(value = "/changecard" , produces = "application/json; charset=utf-8")
		public @ResponseBody String changeCard(HttpServletRequest request, HttpServletResponse response) throws Exception{
			 ResultVo vo = new ResultVo();
		     String postdata= request.getParameter("postdata");
		     log.info("传入参数__postdata=" + postdata);
			
		       Map<String, Class<C0002_MEM_DAYBOOK>> retMap = new HashMap<String, Class<C0002_MEM_DAYBOOK>>();  
				retMap.put("daybook", C0002_MEM_DAYBOOK.class);
				JsonBean jsonbean = (JsonBean) JSONObject.toBean(JSONObject.fromObject(postdata), JsonBean.class, retMap);
			
			try {
				String placeno= jsonbean.getPlaceno();
				String verifyInfo=jsonbean.getVerifyInfo();
   
			    log.info("接口必要参数名：acccountno----daybook----placeno----pirce----score----checkcount----posamt----verifyInfo********传入参数：" + jsonbean);
				if(null == jsonbean.getAcccountno() || "".equals(jsonbean.getAcccountno()) || 
				   null == jsonbean.getDaybook() || 
				   null == jsonbean.getPirce() || "".equals(jsonbean.getPirce()) || 
				   null == jsonbean.getScore() || "".equals(jsonbean.getScore()) || 
				   null == jsonbean.getCheckcount() || "".equals(jsonbean.getCheckcount()) || 
				   null == jsonbean.getPosamt() || "".equals(jsonbean.getPosamt())){
					log.info("缺少相应参数");
					vo.setResultmsg("缺少相应参数");
					return vo.toChangeResultJson();
				}
				
				if(DateUtil.validationDate(jsonbean.getPlaceno(), jsonbean.getVerifyInfo())){
					vo.setResultmsg("加密验证错误");
					return vo.toChangeResultJson();
				}
				
				if(!commonService.selectCinemaNo(jsonbean.getPlaceno())){
					vo.setResultmsg("电影院不存在");
					return vo.toChangeResultJson();
				}
				
				C0001_MEM_ACCOUNT memAccount = commonService.selectMemberAccount(jsonbean.getAcccountno(), jsonbean.getPlaceno());
				if(null == memAccount){
					vo.setResultmsg("会员不存在");
					return vo.toChangeResultJson();
				}
				if((memAccount.getBalance() - jsonbean.getPirce()) < 0){
					vo.setResultmsg("会员账户余额不足");
					return vo.toChangeResultJson();
				}
				if((memAccount.getPosamt() - jsonbean.getPosamt()) < 0){
					vo.setResultmsg("礼包金额不足");
					return vo.toChangeResultJson();
				}
				if((memAccount.getCkcount() - jsonbean.getCheckcount()) < 0){
					vo.setResultmsg("兑换次数 不足");
					return vo.toChangeResultJson();
				}
				 vo = memcardService.updateCardno(jsonbean);//换卡 更改 卡号
			} catch (Exception e) {
				log.error(e.getMessage());
				vo.setResultcode("1001001");
				vo.setResultmsg("接口异常:" + e.getMessage());
			}
			return JSONObject.fromObject(vo).toString();
		}
	 
		@RequestMapping(value = "/bucard" , produces = "application/json; charset=utf-8")
		public @ResponseBody String buCard(HttpServletRequest request, HttpServletResponse response) throws Exception{
			 ResultVo vo = new ResultVo();
		     String postdata= request.getParameter("postdata");
		     log.info("传入参数__postdata=" + postdata);
		       Map<String, Class<C0002_MEM_DAYBOOK>> retMap = new HashMap<String, Class<C0002_MEM_DAYBOOK>>();  
				retMap.put("daybook", C0002_MEM_DAYBOOK.class);
				JsonBean jsonbean = (JsonBean) JSONObject.toBean(JSONObject.fromObject(postdata), JsonBean.class, retMap);
			
			try {
				String placeno= jsonbean.getPlaceno();
				String verifyInfo=jsonbean.getVerifyInfo();
   
			    log.info("接口必要参数名：acccountno----daybook----placeno----pirce----score----checkcount----posamt----verifyInfo********传入参数：" + jsonbean);
				if(null == jsonbean.getAcccountno() || "".equals(jsonbean.getAcccountno()) || 
				   null == jsonbean.getDaybook() || 
				   null == jsonbean.getPirce() || "".equals(jsonbean.getPirce()) || 
				   null == jsonbean.getScore() || "".equals(jsonbean.getScore()) || 
				   null == jsonbean.getCheckcount() || "".equals(jsonbean.getCheckcount()) || 
				   null == jsonbean.getPosamt() || "".equals(jsonbean.getPosamt())){
					log.info("缺少相应参数");
					vo.setResultmsg("缺少相应参数");
					return vo.toChangeResultJson();
				}
				
				if(DateUtil.validationDate(jsonbean.getPlaceno(), jsonbean.getVerifyInfo())){
					vo.setResultmsg("加密验证错误");
					return vo.toChangeResultJson();
				}
				
				if(!commonService.selectCinemaNo(jsonbean.getPlaceno())){
					vo.setResultmsg("电影院不存在");
					return vo.toChangeResultJson();
				}
				
				C0001_MEM_ACCOUNT memAccount = commonService.selectMemberAccount(jsonbean.getAcccountno(), jsonbean.getPlaceno());
				if(null == memAccount){
					vo.setResultmsg("会员不存在");
					return vo.toChangeResultJson();
				}
				if((memAccount.getBalance() - jsonbean.getPirce()) < 0){
					vo.setResultmsg("会员账户余额不足");
					return vo.toChangeResultJson();
				}
				if((memAccount.getPosamt() - jsonbean.getPosamt()) < 0){
					vo.setResultmsg("礼包金额不足");
					return vo.toChangeResultJson();
				}
				if((memAccount.getCkcount() - jsonbean.getCheckcount()) < 0){
					vo.setResultmsg("兑换次数 不足");
					return vo.toChangeResultJson();
				}
				 vo=memcardService.updatebucard(jsonbean);//补卡 更新卡号 芯片好 续期
				
			} catch (Exception e) {
				log.error(e.getMessage());
				vo.setResultcode("1001001");
				vo.setResultmsg("接口异常:" + e.getMessage());
			}
			return JSONObject.fromObject(vo).toString();
		}
		
		@RequestMapping(value = "/activatecard" , produces = "application/json; charset=utf-8")
		public @ResponseBody String activateCard(HttpServletRequest request, HttpServletResponse response) throws Exception{
			 ResultVo vo = new ResultVo();
		     String postdata= request.getParameter("postdata");
		     log.info("传入参数__postdata=" + postdata);
		       Map<String, Class<C0002_MEM_DAYBOOK>> retMap = new HashMap<String, Class<C0002_MEM_DAYBOOK>>();  
			   retMap.put("daybook", C0002_MEM_DAYBOOK.class);
			   JsonBean jsonbean = (JsonBean) JSONObject.toBean(JSONObject.fromObject(postdata), JsonBean.class, retMap);
			
			try {
				String placeno= jsonbean.getPlaceno();
				String verifyInfo=jsonbean.getVerifyInfo();
   
			    log.info("接口必要参数名：acccountno----daybook----placeno----pirce----score----checkcount----posamt----verifyInfo********传入参数：" + jsonbean);
				if(null == jsonbean.getAcccountno() || "".equals(jsonbean.getAcccountno()) || 
				   null == jsonbean.getDaybook() || 
				   null == jsonbean.getPirce() || "".equals(jsonbean.getPirce()) || 
				   null == jsonbean.getScore() || "".equals(jsonbean.getScore()) || 
				   null == jsonbean.getCheckcount() || "".equals(jsonbean.getCheckcount()) || 
				   null == jsonbean.getPosamt() || "".equals(jsonbean.getPosamt())){
					log.info("缺少相应参数");
					vo.setResultmsg("缺少相应参数");
					return vo.toChangeResultJson();
				}
				
				if(DateUtil.validationDate(jsonbean.getPlaceno(), jsonbean.getVerifyInfo())){
					vo.setResultmsg("加密验证错误");
					return vo.toChangeResultJson();
				}
				
				if(!commonService.selectCinemaNo(jsonbean.getPlaceno())){
					vo.setResultmsg("电影院不存在");
					return vo.toChangeResultJson();
				}
				
				C0001_MEM_ACCOUNT memAccount = commonService.selectMemberAccount(jsonbean.getAcccountno(), jsonbean.getPlaceno());
				if(null == memAccount){
					vo.setResultmsg("会员不存在");
					return vo.toChangeResultJson();
				}
				if((memAccount.getBalance() - jsonbean.getPirce()) < 0){
					vo.setResultmsg("会员账户余额不足");
					return vo.toChangeResultJson();
				}
				if((memAccount.getPosamt() - jsonbean.getPosamt()) < 0){
					vo.setResultmsg("礼包金额不足");
					return vo.toChangeResultJson();
				}
				if((memAccount.getCkcount() - jsonbean.getCheckcount()) < 0){
					vo.setResultmsg("兑换次数 不足");
					return vo.toChangeResultJson();
				}
				vo= memcardService.updateActivateCard(jsonbean);//激活    更新续期 积分 余额
				
			} catch (Exception e) {
				log.error(e.getMessage());
				vo.setResultcode("1001001");
				vo.setResultmsg("接口异常:" + e.getMessage());
			}
			return JSONObject.fromObject(vo).toString();
		}
		
		
/*		换卡：
		{"acccountno":"",daybook:[],placeno:"","cardno":"","memoryid":"",traceprice:"","score":""};
		返回：{"resultcode":"","resultmsg":"","serialnumber":"中心流水号_地面流水号"};

		补卡：
		{"acccountno":"",daybook:[],placeno:"","cardno":"","memoryid":"","traceprice":"","score":""};
		返回：{"resultcode":"","resultmsg":"","serialnumber":"中心流水号_地面流水号"};

		激活：
		{"acccountno":"",daybook:[],placeno:"","memoryid":"","pirce":"",traceprice:"","score":""};
		返回：{"resultcode":"","resultmsg":"","serialnumber":"中心流水号_地面流水号"};*/

		
}

