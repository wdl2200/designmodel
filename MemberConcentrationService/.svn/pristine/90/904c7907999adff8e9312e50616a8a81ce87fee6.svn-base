/* ========================================================
* 哈尔滨富利通科技有限公司研发二部
* 日 期：2018年5月19日
* 功 能：
* 作 者：李丹丹
* 版 本：1.0.0
* =========================================================
*/
package com.cmts.xm.web.member;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import net.sf.json.JSONObject;

import org.apache.log4j.Logger;
import org.junit.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import com.cmts.xm.bean.table.common.JsonBean;
import com.cmts.xm.bean.table.member.C0001_MEM_ACCOUNT;
import com.cmts.xm.bean.table.member.C0002_MEM_DAYBOOK;
import com.cmts.xm.bean.vo.ResultVo;
import com.cmts.xm.dao.util.DateUtil;
import com.cmts.xm.service.common.CommonService;
import com.cmts.xm.service.member.AdjustAccountService;
import com.cmts.xm.utils.ErrorCode;
import com.cmts.xm.utils.HttpUtils;
import com.cmts.xm.utils.Md5;


@SuppressWarnings({ "all" })
@Controller
@RequestMapping(value = "/")
public class AdjustAccountController {
private static Logger log = Logger.getLogger(AdjustAccountController.class);
	
	@Autowired
	private CommonService commonService;
	
	@Autowired AdjustAccountService adjustService;
	
	
	@RequestMapping(value = "/adjustLevel" , produces = "application/json; charset=utf-8")
	public @ResponseBody String adjustLevel(String postdata,HttpServletRequest request, HttpServletResponse response){
		ResultVo vo = new ResultVo();
		log.info("接口处理开始：");
		if(postdata == null){
			log.info("传入数据为空");
		}
		try {
			JsonBean jsonbean = DateUtil.procJson(postdata);
			log.info("传入参数：acccountno=" + jsonbean.getAccountno());
			log.info("传入参数：daybook=" + jsonbean.getDaybook());
			log.info("传入参数：placeno=" + jsonbean.getPlaceno());
			log.info("传入参数：membertype=" + jsonbean.getMembertypeno());
			log.info("传入参数：traceprice=" + jsonbean.getTraceprice());
			log.info("传入参数：score=" + jsonbean.getScore());
			log.info("传入参数：membertypename=" + jsonbean.getMembertypename());
			
			if(null == jsonbean.getAccountno() || 
			   null == jsonbean.getDaybook() || 
			   null == jsonbean.getPlaceno() ||
			   null == jsonbean.getMembertypeno() ||
			   null == jsonbean.getTraceprice() ||
			   null == jsonbean.getScore() ||
			   null == jsonbean.getMembertypename() || 
			   "".equals(jsonbean.getAccountno()) ||
			   "".equals(jsonbean.getDaybook()) ||
			   "".equals(jsonbean.getPlaceno()) ||
			   "".equals(jsonbean.getMembertypeno()) ||
			   "".equals(jsonbean.getTraceprice()) ||
			   "".equals(jsonbean.getMembertypename()) ||
			   "".equals(jsonbean.getScore())){
			log.info("缺少相应参数");
			vo.setResultcode(ErrorCode.PARAM_LOST_ERROR.getValues());
			vo.setResultmsg(ErrorCode.PARAM_LOST_ERROR.getMsg());
			return vo.toChangeResultJson();
			}
			
			if(DateUtil.validationDate(jsonbean.getPlaceno(), jsonbean.getVerifyInfo())){
				log.info("校验失败");
				vo.setResultcode(ErrorCode.VALICATE_CODE_ERROR.getValues());
				vo.setResultmsg(ErrorCode.VALICATE_CODE_ERROR.getMsg());
				return vo.toChangeResultJson();
			}
			
			if(!commonService.selectCinemaNo(jsonbean.getPlaceno())){
				log.info("电影院不存在");
				vo.setResultcode(ErrorCode.CINEMA_LOST_ERROR.getValues());
				vo.setResultmsg(ErrorCode.CINEMA_LOST_ERROR.getMsg());
				return vo.toChangeResultJson();
			}
			
			C0001_MEM_ACCOUNT memAccount = commonService.selectMemberAccount(jsonbean.getAccountno(), jsonbean.getPlaceno());
			if(null == memAccount){
				log.info("会员不存在");
				vo.setResultcode(ErrorCode.ACCOUNT_LOST_ERROR.getValues());
				vo.setResultmsg(ErrorCode.ACCOUNT_LOST_ERROR.getMsg());
				return vo.toChangeResultJson();
			}
			
			if((memAccount.getBalance() + jsonbean.getTraceprice()) < 0){
				log.info("会员账户余额不足");
				vo.setResultcode(ErrorCode.ACCOUNT_NOTENOUGH_ERROR.getValues());
				vo.setResultmsg(ErrorCode.ACCOUNT_NOTENOUGH_ERROR.getMsg());
				return vo.toChangeResultJson();
			}
			
			C0001_MEM_ACCOUNT account = commonService.selectMemberAccount(jsonbean.getAccountno(), jsonbean.getPlaceno());
			vo = adjustService.insertDaybookUpdateAccount(jsonbean, account);
			
		} catch (Exception e) {
			log.error("系统异常" + e);
			vo.setResultcode(ErrorCode.SYSTEM_ERROR.getValues());
			vo.setResultmsg(ErrorCode.SYSTEM_ERROR.getMsg());
			return vo.toChangeResultJson();
		}
		
		return JSONObject.fromObject(vo).toString();
	}
	
	@RequestMapping(value = "/adjustScore" , produces = "application/json; charset=utf-8")
	public @ResponseBody String adjustScore(String postdata,HttpServletRequest request, HttpServletResponse response){
		ResultVo vo = new ResultVo();
		log.info("接口处理开始：");
		if(postdata == null){
			log.info("传入数据为空");
		}
		
		try {
			JsonBean jsonbean = DateUtil.procJson(postdata);
			log.info("传入参数：acccountno=" + jsonbean.getAccountno());
			log.info("传入参数：daybook=" + jsonbean.getDaybook());
			log.info("传入参数：placeno=" + jsonbean.getPlaceno());
			log.info("传入参数：traceprice=" + jsonbean.getTraceprice());
			log.info("传入参数：score=" + jsonbean.getScore());
			
			if(null == jsonbean.getAccountno() || 
					   null == jsonbean.getDaybook() || 
					   null == jsonbean.getPlaceno() ||
					   null == jsonbean.getTraceprice() ||
					   null == jsonbean.getScore() ||
					   "".equals(jsonbean.getAccountno()) ||
					   "".equals(jsonbean.getDaybook()) ||
					   "".equals(jsonbean.getPlaceno()) ||
					   "".equals(jsonbean.getTraceprice()) ||
					   "".equals(jsonbean.getScore())){
					log.info("缺少相应参数");
					vo.setResultcode(ErrorCode.PARAM_LOST_ERROR.getValues());
					vo.setResultmsg(ErrorCode.PARAM_LOST_ERROR.getMsg());
					return vo.toChangeResultJson();
			}
			
			if(DateUtil.validationDate(jsonbean.getPlaceno(), jsonbean.getVerifyInfo())){
				log.info("校验失败");
				vo.setResultcode(ErrorCode.VALICATE_CODE_ERROR.getValues());
				vo.setResultmsg(ErrorCode.VALICATE_CODE_ERROR.getMsg());
				return vo.toChangeResultJson();
			}
			
			if(!commonService.selectCinemaNo(jsonbean.getPlaceno())){
				log.info("电影院不存在");
				vo.setResultcode(ErrorCode.CINEMA_LOST_ERROR.getValues());
				vo.setResultmsg(ErrorCode.CINEMA_LOST_ERROR.getMsg());
				return vo.toChangeResultJson();
			}
			
			C0001_MEM_ACCOUNT memAccount = commonService.selectMemberAccount(jsonbean.getAccountno(), jsonbean.getPlaceno());
			if(null == memAccount){
				log.info("会员不存在");
				vo.setResultcode(ErrorCode.ACCOUNT_LOST_ERROR.getValues());
				vo.setResultmsg(ErrorCode.ACCOUNT_LOST_ERROR.getMsg());
				return vo.toChangeResultJson();
			}
			
			if((memAccount.getBalance() + jsonbean.getTraceprice()) < 0){
				log.info("会员账户余额不足");
				vo.setResultcode(ErrorCode.ACCOUNT_NOTENOUGH_ERROR.getValues());
				vo.setResultmsg(ErrorCode.ACCOUNT_NOTENOUGH_ERROR.getMsg());
				return vo.toChangeResultJson();
			}
			
			C0001_MEM_ACCOUNT account = commonService.selectMemberAccount(jsonbean.getAccountno(), jsonbean.getPlaceno());
			vo = adjustService.insertDaybookUpdateScore(jsonbean, account);
			
		} catch (Exception e) {
			log.error("系统异常" + e);
			vo.setResultcode(ErrorCode.SYSTEM_ERROR.getValues());
			vo.setResultmsg(ErrorCode.SYSTEM_ERROR.getMsg());
			return vo.toChangeResultJson();
		}
		return JSONObject.fromObject(vo).toString();
	
	}
	
	@RequestMapping(value = "/buyGiftPackage" , produces = "application/json; charset=utf-8")
	public @ResponseBody String buyGiftPackage(String postdata,HttpServletRequest request, HttpServletResponse response){
		ResultVo vo = new ResultVo();
		log.info("接口处理开始：");
		if(postdata == null){
			log.info("传入数据为空");
		}
		
		try {
			JsonBean jsonbean = DateUtil.procJson(postdata);
			log.info("传入参数：acccountno=" + jsonbean.getAccountno());
			log.info("传入参数：daybook=" + jsonbean.getDaybook());
			log.info("传入参数：placeno=" + jsonbean.getPlaceno());
			log.info("传入参数：membertype=" + jsonbean.getMembertypeno());
			log.info("传入参数：traceprice=" + jsonbean.getTraceprice());
			log.info("传入参数：score=" + jsonbean.getScore());
			log.info("传入参数：checkcount=" + jsonbean.getCheckcount());
			log.info("传入参数：posamt=" + jsonbean.getPosamt());
			log.info("传入参数：membertypename=" + jsonbean.getMembertypename());
			
			if(null == jsonbean.getAccountno() || 
			   null == jsonbean.getDaybook() || 
			   null == jsonbean.getPlaceno() ||
			   null == jsonbean.getMembertypeno() ||
			   null == jsonbean.getTraceprice() ||
			   null == jsonbean.getScore() ||
			   null == jsonbean.getCheckcount() ||
			   null == jsonbean.getPosamt() ||
			   null == jsonbean.getMembertypename() || 
			   "".equals(jsonbean.getAccountno()) ||
			   "".equals(jsonbean.getDaybook()) ||
			   "".equals(jsonbean.getPlaceno()) ||
			   "".equals(jsonbean.getMembertypeno()) ||
			   "".equals(jsonbean.getTraceprice()) ||
			   "".equals(jsonbean.getScore()) ||
			   "".equals(jsonbean.getCheckcount()) ||
			   "".equals(jsonbean.getMembertypename()) ||
			   "".equals(jsonbean.getPosamt())){
			log.info("缺少相应参数");
			vo.setResultcode(ErrorCode.PARAM_LOST_ERROR.getValues());
			vo.setResultmsg(ErrorCode.PARAM_LOST_ERROR.getMsg());
			return vo.toChangeResultJson();
			}
			
			if(DateUtil.validationDate(jsonbean.getPlaceno(), jsonbean.getVerifyInfo())){
				log.info("校验失败");
				vo.setResultcode(ErrorCode.VALICATE_CODE_ERROR.getValues());
				vo.setResultmsg(ErrorCode.VALICATE_CODE_ERROR.getMsg());
				return vo.toChangeResultJson();
			}
			
			if(!commonService.selectCinemaNo(jsonbean.getPlaceno())){
				log.info("电影院不存在");
				vo.setResultcode(ErrorCode.CINEMA_LOST_ERROR.getValues());
				vo.setResultmsg(ErrorCode.CINEMA_LOST_ERROR.getMsg());
				return vo.toChangeResultJson();
			}
			
			C0001_MEM_ACCOUNT memAccount = commonService.selectMemberAccount(jsonbean.getAccountno(), jsonbean.getPlaceno());
			if(null == memAccount){
				log.info("会员不存在");
				vo.setResultcode(ErrorCode.ACCOUNT_LOST_ERROR.getValues());
				vo.setResultmsg(ErrorCode.ACCOUNT_LOST_ERROR.getMsg());
				return vo.toChangeResultJson();
			}
			
			if((memAccount.getBalance() + jsonbean.getTraceprice()) < 0){
				log.info("会员账户余额不足");
				vo.setResultcode(ErrorCode.ACCOUNT_NOTENOUGH_ERROR.getValues());
				vo.setResultmsg(ErrorCode.ACCOUNT_NOTENOUGH_ERROR.getMsg());
				return vo.toChangeResultJson();
			}
			
			C0001_MEM_ACCOUNT account = commonService.selectMemberAccount(jsonbean.getAccountno(), jsonbean.getPlaceno());
			vo = adjustService.insertDaybookBuyGiftPackage(jsonbean, account);
			
		} catch (Exception e) {
			log.error("系统异常" + e);
			vo.setResultcode(ErrorCode.SYSTEM_ERROR.getValues());
			vo.setResultmsg(ErrorCode.SYSTEM_ERROR.getMsg());
			return vo.toChangeResultJson();
		}
		return JSONObject.fromObject(vo).toString();
	}
	
}

