package com.cmts.xm.web.member;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import com.cmts.xm.bean.table.common.JsonBean;
import com.cmts.xm.bean.table.member.C0001_MEM_ACCOUNT;
import com.cmts.xm.bean.vo.ResultVo;
import com.cmts.xm.dao.util.DateUtil;
import com.cmts.xm.service.common.CommonService;
import com.cmts.xm.service.member.ConsumptionAndTopUpService;

import net.sf.json.JSONObject;

/**
 * 
 * @Description: 消费与充值
 * @ClassName: ConsumptionAndTopUpAction
 * @author: 王淼 
 * @date: 2018年5月19日 上午10:48:21  
 *
 */
@SuppressWarnings({ "all" })
@Controller
@RequestMapping(value = "/")
public class ConsumptionAndTopUpAction {
	
	private static Logger log = Logger.getLogger(ConsumptionAndTopUpAction.class);
	
	@Autowired
	private CommonService commonService;
	
	@Autowired
	private ConsumptionAndTopUpService consumptionAndTopUpService;
	
	/**
	 * 
	 * @Description: 消费接口（售与退）
	 * @Title: consumption  
	 * @author: 王淼 
	 * @Date: 2018年5月19日 上午11:02:06
	 *
	 * @param postdata
	 * @param request
	 * @param response
	 * @return
	 *   
	 * @throws
	 */
	@RequestMapping(value = "consumption" , produces = "application/json; charset=utf-8")
	public @ResponseBody String consumption(String postdata, HttpServletRequest request, HttpServletResponse response){
		ResultVo vo = new ResultVo();
		log.info("接口处理开始：");
		
		try {
			JsonBean jsonbean = (JsonBean) JSONObject.toBean(JSONObject.fromObject(postdata), JsonBean.class);
			log.info("接口必要参数名：acccountno----daybook----placeno----pirce----score----checkcount----posamt----verifyInfo********传入参数：" + jsonbean);
			if(null == jsonbean.getAcccountno() || "".equals(jsonbean.getAcccountno()) || 
			   null == jsonbean.getDaybook() || 
			   null == jsonbean.getPirce() || "".equals(jsonbean.getPirce()) || 
			   null == jsonbean.getScore() || "".equals(jsonbean.getScore()) || 
			   null == jsonbean.getCheckcount() || "".equals(jsonbean.getCheckcount()) || 
			   null == jsonbean.getPosamt() || "".equals(jsonbean.getPosamt())){
				log.info("缺少相应参数");
				vo.setResultmsg("缺少相应参数");
				return vo.toChangeResultJson();
			}
			
			if(DateUtil.validationDate(jsonbean.getPlaceno(), jsonbean.getVerifyInfo())){
				vo.setResultmsg("加密验证错误");
				return vo.toChangeResultJson();
			}
			
			if(!commonService.selectCinemaNo(jsonbean.getPlaceno())){
				vo.setResultmsg("电影院不存在");
				return vo.toChangeResultJson();
			}
			
			C0001_MEM_ACCOUNT memAccount = commonService.selectMemberAccount(jsonbean.getAcccountno(), jsonbean.getPlaceno());
			
			if(null == memAccount){
				vo.setResultmsg("会员不存在");
				return vo.toChangeResultJson();
			}
			
			if((memAccount.getBalance() - jsonbean.getPirce()) < 0){
				vo.setResultmsg("会员账户余额不足");
				return vo.toChangeResultJson();
			}
			
			if((memAccount.getPosAmt() - jsonbean.getPosamt()) < 0){
				vo.setResultmsg("礼包金额不足");
				return vo.toChangeResultJson();
			}
			
			if((memAccount.getCkCount() - jsonbean.getCheckcount()) < 0){
				vo.setResultmsg("兑换次数 不足");
				return vo.toChangeResultJson();
			}
			
			return vo.toChangeResultJson();
		} catch (Exception e) {
			log.info("系统异常" + e);
			vo.setResultmsg("系统异常");
			return vo.toChangeResultJson();
		}
	}
	
	/**
	 * 
	 * @Description: 充值接口（正负充值）
	 * @Title: topUp  
	 * @author: 王淼 
	 * @Date: 2018年5月19日 上午11:02:46
	 *
	 * @param postdata
	 * @param request
	 * @param response
	 * @return
	 *   
	 * @throws
	 */
	@RequestMapping(value = "topUp" , produces = "application/json; charset=utf-8")
	public @ResponseBody String topUp(String postdata, HttpServletRequest request, HttpServletResponse response){
		ResultVo vo = new ResultVo();
		log.info("接口处理开始：");
		
		try {
			JsonBean jsonbean = (JsonBean) JSONObject.toBean(JSONObject.fromObject(postdata), JsonBean.class);
			log.info("接口必要参数名：acccountno----daybook----placeno----pirce----score----membertypeno----verifyInfo********传入参数：" + jsonbean);
			if(null == jsonbean.getAcccountno() || "".equals(jsonbean.getAcccountno()) || 
			   null == jsonbean.getDaybook() || 
			   null == jsonbean.getPirce() || "".equals(jsonbean.getPirce()) || 
			   null == jsonbean.getScore() || "".equals(jsonbean.getScore()) || 
			   null == jsonbean.getMembertypeno() || "".equals(jsonbean.getMembertypeno())){
				log.info("缺少相应参数");
				vo.setResultmsg("缺少相应参数");
				return vo.toChangeResultJson();
			}
			
			if(DateUtil.validationDate(jsonbean.getPlaceno(), jsonbean.getVerifyInfo())){
				vo.setResultmsg("加密验证错误");
				return vo.toChangeResultJson();
			}
			
			if(!commonService.selectCinemaNo(jsonbean.getPlaceno())){
				vo.setResultmsg("电影院不存在");
				return vo.toChangeResultJson();
			}
			
			C0001_MEM_ACCOUNT memAccount = commonService.selectMemberAccount(jsonbean.getAcccountno(), jsonbean.getPlaceno());
			
			if(null == memAccount){
				vo.setResultmsg("会员不存在");
				return vo.toChangeResultJson();
			}
			
			if((memAccount.getBalance() - jsonbean.getPirce()) < 0){
				vo.setResultmsg("会员账户余额不足");
				return vo.toChangeResultJson();
			}
			
			return vo.toChangeResultJson();
		} catch (Exception e) {
			log.info("系统异常" + e);
			vo.setResultmsg("系统异常");
			return vo.toChangeResultJson();
		}
	}
}
