package com.cmts.xm.service.member.impl;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.transaction.interceptor.TransactionAspectSupport;

import com.cmts.xm.bean.table.common.JsonBean;
import com.cmts.xm.bean.vo.ResultVo;
import com.cmts.xm.dao.DaoFactory;
import com.cmts.xm.service.common.CommonService;
import com.cmts.xm.service.member.ConsumptionAndRechargeService;
import com.cmts.xm.utils.ErrorCode;

/**
 * 
 * @Description: 消费与充值Service实现
 * @ClassName: ConsumptionAndTopUpServiceImpl
 * @author: 王淼 
 * @date: 2018年5月19日 下午2:02:01  
 *
 */
@SuppressWarnings({ "all" })
@Service
public class ConsumptionAndRechargeServiceImpl implements ConsumptionAndRechargeService {
	
	private static Logger log = Logger.getLogger(ConsumptionAndRechargeServiceImpl.class);
	
	@Autowired
	private DaoFactory dao;
	
	@Autowired
	private CommonService commonService;
	

	/**
	 * 
	 * @Description: 消费
	 * @Title: consumptionInformation  
	 * @author: 王淼 
	 * @Date: 2018年5月19日 下午12:30:08
	 *
	 * @param jsonbean
	 * @return
	 * @throws Exception
	 *   
	 * @throws
	 */
	@Transactional(propagation = Propagation.REQUIRED)
	public ResultVo consumptionInformation(JsonBean jsonbean) throws Exception {
		log.info("***********开始执行消费处理方法***********");
		ResultVo vo = new ResultVo();
		String serialnumber = commonService.procMemdaybook(jsonbean);
		if("-1".equals(serialnumber)){
			TransactionAspectSupport.currentTransactionStatus().setRollbackOnly();
			vo.setResultcode(ErrorCode.PAYBOOK_PROC_ERROR.getValues());
			vo.setResultmsg(ErrorCode.PAYBOOK_PROC_ERROR.getMsg());
			return vo;
		}
		updateMemAccountConsumption(jsonbean);
		Map<String, Object> map = new HashMap<String, Object>();
		map.put("serialnumber", serialnumber);
		map.put("account", commonService.selectMemberAccount(jsonbean.getAccountno(), jsonbean.getPlaceno()));
		vo.setResultcode(ErrorCode.SUCCESS.getValues());
		vo.setResultmsg(ErrorCode.SUCCESS.getMsg());
		vo.setResultMap(map);
		return vo;
	}
	
	//消费修改会员卡信息
	private void updateMemAccountConsumption(JsonBean jsonbean) throws Exception {
		log.info("***********消费更新会员卡信息开始***********");
		List<Object> params = new ArrayList<Object>();
		StringBuffer sql = new StringBuffer("UPDATE C0001_MEM_ACCOUNT C0001 SET");
		sql.append("  C0001.BALANCE = C0001.BALANCE + ?");
		sql.append(", C0001.SCORE = C0001.SCORE + ?");
		sql.append(", C0001.CKCOUNT = C0001.CKCOUNT + ?");
		sql.append(", C0001.POSAMT = C0001.POSAMT + ?");
		sql.append(" WHERE C0001.ACCOUNTNO = ? AND C0001.PLACENO = ?");
		params.add(jsonbean.getPrice());
		params.add(jsonbean.getScore());
		params.add(jsonbean.getCheckcount());
		params.add(jsonbean.getPosamt());
		params.add(jsonbean.getAccountno());
		params.add(jsonbean.getPlaceno());
		dao.updatesql(sql.toString(), params.toArray());
		log.info("***********消费更新会员卡信息结束***********");
	}
	
	/**
	 * 
	 * @Description: 充值
	 * @Title: topUpInformation  
	 * @author: 王淼 
	 * @Date: 2018年5月19日 下午1:57:18
	 *
	 * @param jsonbean
	 * @return
	 * @throws Exception
	 *   
	 * @throws
	 */
	@Transactional(propagation = Propagation.REQUIRED)
	public ResultVo rechargeInformation(JsonBean jsonbean) throws Exception {
		log.info("***********开始执行充值处理方法***********");
		ResultVo vo = new ResultVo();
		String serialnumber = commonService.procMemdaybook(jsonbean);
		if("-1".equals(serialnumber)){
			TransactionAspectSupport.currentTransactionStatus().setRollbackOnly();
			vo.setResultcode(ErrorCode.PAYBOOK_PROC_ERROR.getValues());
			vo.setResultmsg(ErrorCode.PAYBOOK_PROC_ERROR.getMsg());
			return vo;
		}
		updateMemAccountRecharge(jsonbean);
		Map<String, Object> map = new HashMap<String, Object>();
		map.put("serialnumber", serialnumber);
		map.put("account", commonService.selectMemberAccount(jsonbean.getAccountno(), jsonbean.getPlaceno()));
		vo.setResultcode(ErrorCode.SUCCESS.getValues());
		vo.setResultmsg(ErrorCode.SUCCESS.getMsg());
		vo.setResultMap(map);
		return vo;
	}
	
	//充值修改会员卡信息
	private void updateMemAccountRecharge(JsonBean jsonbean) throws Exception{
		log.info("***********消费更新会员卡信息开始***********");
		List<Object> params = new ArrayList<Object>();
		StringBuffer sql = new StringBuffer("UPDATE C0001_MEM_ACCOUNT C0001 SET");
		sql.append("  C0001.BALANCE = C0001.BALANCE + ?");
		sql.append(", C0001.SCORE = C0001.SCORE + ?");
		sql.append(", C0001.MONEYADD = C0001.MONEYADD + ?");
		sql.append(", C0001.MEMBERTYPENO = ?");
		sql.append(", C0001.MEMBERTYPENAME = ?");
		sql.append(" WHERE C0001.ACCOUNTNO = ? AND C0001.PLACENO = ?");
		params.add(jsonbean.getPrice());
		params.add(jsonbean.getScore());
		params.add(jsonbean.getPrice());
		params.add(jsonbean.getMembertypeno());
		params.add(jsonbean.getMembertypename());
		params.add(jsonbean.getAccountno());
		params.add(jsonbean.getPlaceno());
		dao.updatesql(sql.toString(), params.toArray());
		log.info("***********充值更新会员卡信息结束***********");
		
	}

}
