package com.cmts.xm.web.member;

import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import net.sf.json.JSONArray;
import net.sf.json.JSONObject;

import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import com.cmts.xm.bean.table.common.JsonBean;
import com.cmts.xm.bean.table.member.C0001_MEM_ACCOUNT;
import com.cmts.xm.bean.table.member.C0002_MEM_DAYBOOK;
import com.cmts.xm.bean.vo.ResultVo;
import com.cmts.xm.dao.util.DateUtil;
import com.cmts.xm.service.common.CommonService;
import com.cmts.xm.service.member.MemberAccountHlService;
import com.cmts.xm.utils.Md5;
/**
 * 
 * @Description: 积分换礼
 * @ClassName: MemberIntegralGift
 * @author: 王海明
 * @date: 2018年5月19日 
 *
 */
@SuppressWarnings({ "all" })
@Controller
@RequestMapping(value = "/")
public class MemberIntegralGift {
	
	private static Logger log = Logger.getLogger(MemberIntegralGift.class);
	
	@Autowired
	private MemberAccountHlService memberAccountHlService;
	
	@Autowired
	private CommonService  commonService;
	
	@RequestMapping(value = "/memberIntegralGift", produces = "application/json; charset=utf-8")
	public @ResponseBody String memberIntegralGift(HttpServletRequest request,HttpServletResponse response){
		ResultVo vo = new ResultVo();
		String postdata = request.getParameter("postdata");
		
		try {
			Map<String, Class<C0002_MEM_DAYBOOK>> retMap = new HashMap<String, Class<C0002_MEM_DAYBOOK>>();  
			retMap.put("daybook", C0002_MEM_DAYBOOK.class);
			JsonBean jsonbean = (JsonBean) JSONObject.toBean(JSONObject.fromObject(postdata), JsonBean.class, retMap);
//			JsonBean jsonbean = (JsonBean) JSONObject.toBean(JSONObject.fromObject(postdata), JsonBean.class);
			
			log.info("接口必要参数名：acccountno----daybook----placeno----price----score----verifyInfo********传入参数：" + jsonbean);
			if(null == jsonbean.getAcccountno() || "".equals(jsonbean.getAcccountno()) || 
			   null == jsonbean.getDaybook() || 
			   null == jsonbean.getPlaceno() || "".equals(jsonbean.getPassword()) ||
			   null == jsonbean.getPirce() || "".equals(jsonbean.getPirce()) || 
			   null == jsonbean.getScore() || "".equals(jsonbean.getScore()) ){
				log.info("缺少相应参数：acccountno=" + jsonbean.getAcccountno() + 
						  " daybook=" + jsonbean.getDaybook() +
						  " placeno=" + jsonbean.getPlaceno() +
						  " price=" + jsonbean.getPirce() +
						  " score=" + jsonbean.getScore());
				vo.setResultcode("11011");
				vo.setResultmsg("缺少相应参数");
				return vo.toChangeResultJson();
			}
			
			if(DateUtil.validationDate(jsonbean.getPlaceno(), jsonbean.getVerifyInfo())){
				log.info("加密验证错误");
				vo.setResultcode("11012");
				vo.setResultmsg("加密验证错误");
				return vo.toChangeResultJson();
			}
			
			if(!commonService.selectCinemaNo(jsonbean.getPlaceno())){
				log.info("电影院不存在");
				vo.setResultcode("11013");
				vo.setResultmsg("电影院不存在");
				return vo.toChangeResultJson();
			}	
									
			C0001_MEM_ACCOUNT memberAccount = commonService.selectMemberAccount(jsonbean.getAcccountno(), jsonbean.getPlaceno());

			if(null == memberAccount){
				log.info("会员不存在");
				vo.setResultcode("11014");
				vo.setResultmsg("会员不存在");
				return vo.toChangeResultJson();
			}
			if(memberAccount.getBalance() - jsonbean.getPirce() < 0 ){
				//余额不足
				log.info("会员账户余额不足");
				vo.setResultcode("11015");
				vo.setResultmsg("会员账户余额不足");
				return vo.toChangeResultJson();
			}
			if(memberAccount.getScore() - jsonbean.getScore() < 0 ){
				//积分不足
				log.info("积分不足");
				vo.setResultcode("11016");
				vo.setResultmsg("积分不足");
				return vo.toChangeResultJson();
			}	
			
			vo = memberAccountHlService.addMemberAccountHl(jsonbean,memberAccount);
					
		} catch (Exception e) {
			log.info("接口异常" , e);
			e.printStackTrace();
			vo.setResultcode("12000");
			vo.setResultmsg("接口异常");			
		}
		return JSONObject.fromObject(vo).toString();
	}

	
}
